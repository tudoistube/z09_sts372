<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	//...과제22-5.D. /z09_sts372/src/main/resources/mappers/memberMapper.xml 생성.
	131p.http://www.mybatis.org/mybatis-3/getting-started.html
	아래쪽 Exploring Mapped SQL Statements 참조.
	XML Mapper를 작성할 때는 클래스의 패키지와 유사한 용도로, MyBatis내에서 원하는 SQL문을 찾을 수 있는
	namespace 설정에 가장 신경을 많이 써야 함.
	XML Mapper는 root-context.xml에서 스프링이 인식하도록 등록함.
	/zex00/src/main/webapp/WEB-INF/spring/root-context.xml
 -->
 <!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- 
	MyBatis는 기본적으로 PreparedStatement를 이용해서 처리됨.
	개발자가 PreparedStatement에 들어가는 파라미터를 사용할 때는 '#{}'기호를 이용해서 처리함.
	'#{}'의 규칙.
		1. 파라미터가 여러 속성을 가진 객체인 경우 '#{num}'은 getNum() or setNum()을 의미함.
		2. 파라미터가 하나이고, 기본자료형이나 문자열인 경우 값이 그대로 전달됨.
		3. 파라미터가 Map타입인 경우 '#{num}'은 Map객체의 키값이 'num'인 값을 찾는다.
 -->  
<mapper namespace="org.jone.mapper.MemberMapper">
  <!--mySql : select now() -->
  <select id="getTime" resultType="String">    
    SELECT TO_CHAR(SYSDATE, 'MONTH DD, YYYY, HH24:MI:SS') from dual;
  </select>

  <insert id="insertMember">
    insert into ztbl_member (userid, userpw, username, email) values
  	(#{userid}, #{userpw}, #{username}, #{email})
  </insert>
  
  <select id="selectMember" 
          resultType="org.jone.zdomain.MemberVO">
	  select 
	    * 
	  from 
	    ztbl_member 
	  where userid = #{userid}
  </select>  
  
  
  <select id="readWithPW" 
         resultType="org.jone.zdomain.MemberVO">
	  select 
	    * 
	  from 
	    ztbl_member 
	  where userid = #{userid} 
	    and userpw = #{userpw}
  </select>
    
  
</mapper>